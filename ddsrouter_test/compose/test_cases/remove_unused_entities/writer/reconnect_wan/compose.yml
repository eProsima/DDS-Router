# Test description:
#   Check that tracks get rebuilt when a publisher over WAN disconnects and reconnects.
#
# Test architecture:
#
# ┌─────────────────────────────────────────┐
# │  cloud_edge_net                         │
# │ ┌─────────────────┐ ┌─────────────────┐ │
# │ │ddsrouter_cloud_0│ │ddsrouter_cloud_1│ │
# │ │                ─┼─┤►                │ │
# │ │(wan + wan)      │ │(wan + wan)      │ │
# │ └──────────────▲──┘ └──────────────┬──┘ │
# │                │                   │    │
# │ ┌──────────────┼──┐ ┌──────────────┼──┐ │
# │ │  Domain 80   │  │ │  Domain 81   │  │ │
# │ │              │  │ │              │  │ │
# │ │  edge_0_net  │  │ │  edge_1_net  │  │ │
# │ │ ┌────────────┴┐ │ │ ┌────────────▼┐ │ │
# │ │ │ddsrouter_0  │ │ │ │ddsrouter_1  │ │ │
# │ │ │             │ │ │ │             │ │ │
# │ │ │(local + wan)│ │ │ │(local + wan)│ │ │
# │ │ └──────────▲──┘ │ │ └──────────┬──┘ │ │
# │ │            │    │ │            │    │ │
# └─┼────────────┼────┼─┼────────────┼────┼─┘
#   │            │    │ │            │    │
#   │ ┌──────────┴──┐ │ │ ┌──────────▼──┐ │
#   │ │publisher_t0 │ │ │ │subscriber_t0│ │
#   │ │             │ │ │ │             │ │
#   │ │(local)      │ │ │ │(local)      │ │
#   │ └─────────────┘ │ │ └─────────────┘ │
#   │                 │ │                 │
#   └─────────────────┘ └─────────────────┘

services:

  # CLOUD
  ddsrouter_cloud_0:
    image: ${DDSROUTER_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: ddsrouter_cloud_0
    networks:
      - cloud_edge_net
    volumes:
      - ./ddsrouter_cloud_0.yaml:/config.yaml
    command: ddsrouter -c /config.yaml --timeout 12

  ddsrouter_cloud_1:
    image: ${DDSROUTER_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: ddsrouter_cloud_1
    depends_on:
      - ddsrouter_cloud_0
    networks:
      - cloud_edge_net
    volumes:
      - ./ddsrouter_cloud_1.yaml:/config.yaml
    command: ddsrouter -c /config.yaml --timeout 12

  # DOMAIN 80
  ddsrouter_edge_0:
    image: ${DDSROUTER_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: ddsrouter_edge_0
    depends_on:
      - ddsrouter_cloud_0
    networks:
      - cloud_edge_net
      - edge_0_net
    volumes:
      - ./ddsrouter_edge_0.yaml:/config.yaml
    command: ddsrouter -c /config.yaml --timeout 14

  publisher_t0_0:
    image: ${DDSROUTER_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: publisher_t0_0
    depends_on:
      - ddsrouter_edge_0
    networks:
      - edge_0_net
    volumes:
      - ../../../../scripts:/scripts
    command: python3 /scripts/execute_and_validate_publisher.py --exe install/AdvancedConfigurationExample/examples/cpp/dds/AdvancedConfigurationExample/AdvancedConfigurationExample --timeout 5 --args "--samples 50 --domain 80 --topic topic0 --interval 100"

  publisher_t0_1:
    image: ${DDSROUTER_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: publisher_t0_1
    depends_on:
      - ddsrouter_edge_0
    networks:
      - edge_0_net
    volumes:
      - ../../../../scripts:/scripts
    command: python3 /scripts/execute_and_validate_publisher.py --exe install/AdvancedConfigurationExample/examples/cpp/dds/AdvancedConfigurationExample/AdvancedConfigurationExample --timeout 5 --delay 6 --args "--samples 50 --domain 80 --topic topic0 --interval 100"

  # DOMAIN 81
  ddsrouter_edge_1:
    image: ${DDSROUTER_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: ddsrouter_edge_1
    depends_on:
      - ddsrouter_cloud_1
    networks:
      - cloud_edge_net
      - edge_1_net
    volumes:
      - ./ddsrouter_edge_1.yaml:/config.yaml
    command: ddsrouter -c /config.yaml --timeout 12

  subscriber_1:
    image: ${DDSROUTER_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: subscriber_1
    depends_on:
      - ddsrouter_edge_1
    networks:
      - edge_1_net
    volumes:
      - ../../../../scripts:/scripts
    command: python3 /scripts/execute_and_validate_subscriber.py --exe install/AdvancedConfigurationExample/examples/cpp/dds/AdvancedConfigurationExample/AdvancedConfigurationExample --samples 60 --allow-duplicates -1 --timeout 12 --args "--samples 60 --domain 81 --topic topic0"

networks:
  edge_0_net:
  edge_1_net:
  cloud_edge_net:
  default:
    driver: none
