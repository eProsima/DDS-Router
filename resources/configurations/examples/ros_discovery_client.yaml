
# ROS DISCOVERY SERVER CLIENT EXAMPLE
# With this example, a DDS Router opens three different interfaces.
# The first one will publish and subscribe in topics in allowlist in a standard DDS Domain.
#
# The second one will act as a Discovery Server.
# It will distribute discovery data at the same time that route data from the other interfaces.
#
# The last one will act as a Discovery Client.
# It will connect to a remote Discovery Server and communicate to every node connected to it, and route data
#  from the other interfaces.

##################################
# ALLOWED TOPICS
# Allowing ROS2 HelloWorld demo_nodes

allowlist:
  [
    {name: "rt/chatter", type: "std_msgs::msg::dds_::String_"},  # 1

    # 2
  ]

##################################
# SIMPLE PARTICIPANT
# This participant will subscribe to topics in allowlist in domain 0 and listen every message published there

SimpleROS2:                       # 3
  type: local                     # 4
  domain: 0                       # 5

##################################
# ROS DISCOVERY CLIENT
# This participant will subscribe to topics in allowlist using Discovery Server protocol as Super Client

ClientROS2:                               # 6
  type: local-discovery-server            # 7
  ros-discovery-server: true              # 8
  id: 2                                   # 9
  connection-addresses:                   # 10
  [
    {
      ros-discovery-server: true,         # 11
      id: 1,                              # 12
      addresses:
      [
        {ip: "127.0.0.1", port: 11888}    # 13

        # 14
      ]
    }

    # 15
  ]

##################################
# CONFIGURATION DESCRIPTION

# 1: Allow DDS ROS 2 specific Topic Name <rt/chatter> with type <std_msgs::msg::dds_::String_>.

# 2: Insert new topics in order to route them.

# 3: New Participant with name <SimpleROS2>.

# 4: Type of SimpleROS2: <local>.
# LAN UDP communication with default simple multicast discovery.
# Remember that every ROS 2 Node relays the middleware communication to DDS, as a standard Participant.

# 5: SimpleROS2 will use DDS Domain ID <0>.

# 6: New Participant with name <ClientROS2>.

# 7: Type of ClientROS2: <local-discovery-server>.
# If not listening address are set for this Participant, it acts as SuperClient of Discovery Server Discovery Protocol.

# 8: Use the default Discovery Server ROS 2 GuidPrefix <44.53. <id> .5f.45.50.52.4f.53.49.4d.41>.

# 9: Set the Discovery Server GuidPrefix to <44.53.02.5f.45.50.52.4f.53.49.4d.41>.

# 10: Add the addresses where this Client will try to reach a Discovery Server.

# 11: Connecting to a Discovery Server with ROS 2 GuidPrefix <44.53. <id> .5f.45.50.52.4f.53.49.4d.41>.

# 12: Set the Remote Discovery Server GuidPrefix to <44.53.01.5f.45.50.52.4f.53.49.4d.41>.

# 13: Connect to a Discovery Server in IP localhost listening in port 11890.
# This is the same configuration as the result using Fast DDS environment variable:
# $> export ROS_DISCOVERY_SERVER=";127.0.0.1:11890"

# 14: Add every other address where trying to reach this same remote Discovery Server.

# 15: Add every other Discovery Server connection required.
