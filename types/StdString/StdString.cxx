// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file StdString.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "StdString.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

StdString::StdString()
{
    // m_x com.eprosima.idl.parser.typecode.StringTypeCode@1060b431
    m_x ="";

}

StdString::~StdString()
{
}

StdString::StdString(
        const StdString& x)
{
    m_x = x.m_x;
}

StdString::StdString(
        StdString&& x)
{
    m_x = std::move(x.m_x);
}

StdString& StdString::operator =(
        const StdString& x)
{

    m_x = x.m_x;

    return *this;
}

StdString& StdString::operator =(
        StdString&& x)
{

    m_x = std::move(x.m_x);

    return *this;
}

size_t StdString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t StdString::getCdrSerializedSize(
        const StdString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.x().size() + 1;

    return current_alignment - initial_alignment;
}

void StdString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_x;

}

void StdString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_x;
}

/*!
 * @brief This function copies the value in member x
 * @param _x New value to be copied in member x
 */
void StdString::x(
        const std::string& _x)
{
    m_x = _x;
}

/*!
 * @brief This function moves the value in member x
 * @param _x New value to be moved in member x
 */
void StdString::x(
        std::string&& _x)
{
    m_x = std::move(_x);
}

/*!
 * @brief This function returns a constant reference to member x
 * @return Constant reference to member x
 */
const std::string& StdString::x() const
{
    return m_x;
}

/*!
 * @brief This function returns a reference to member x
 * @return Reference to member x
 */
std::string& StdString::x()
{
    return m_x;
}

size_t StdString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool StdString::isKeyDefined()
{
    return false;
}

void StdString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}
